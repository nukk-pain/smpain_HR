import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Tooltip,
  Badge,
  Avatar,
  Divider,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Alert,
  Stack,
  Tab,
  Tabs,
  LinearProgress,
  CircularProgress
} from '@mui/material';
import {
  Check as CheckIcon,
  Close as CloseIcon,
  CalendarToday as CalendarIcon,
  Person as PersonIcon,
  BeachAccess as BeachAccessIcon,
  LocalHospital as SickIcon,
  Event as EventIcon,
  Work as WorkIcon,
  TrendingUp as TrendingUpIcon,
  Warning as WarningIcon,
  Schedule as ScheduleIcon
} from '@mui/icons-material';
import { useAuth } from '../components/AuthProvider';
import { useNotification } from '../components/NotificationProvider';
import { apiService } from '../services/api';

interface LeaveRequest {
  _id: string;
  userId: string;
  userName: string;
  userDepartment: string;
  leaveType: string;
  startDate: string;
  endDate: string;
  reason: string;
  status: string;
  submittedAt: string;
  createdAt: string;
  daysCount: number;
  requestDetails?: string;
  cancellationRequested?: boolean;
  cancellationReason?: string;
  cancellationRequestedAt?: string;
  cancellationStatus?: string;
  approvedBy?: string;
  approvedByName?: string;
  approvedAt?: string;
  approvalComment?: string;
}

// TabPanel Ïª¥Ìè¨ÎÑåÌä∏
interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const EmployeeLeaveManagement: React.FC = () => {
  // Tab management
  const [tabValue, setTabValue] = useState(0);
  
  // Leave requests data
  const [pendingRequests, setPendingRequests] = useState<LeaveRequest[]>([]);
  const [pendingCancellations, setPendingCancellations] = useState<LeaveRequest[]>([]);
  const [loading, setLoading] = useState(false);
  
  // Approval dialog states
  const [approvalDialogOpen, setApprovalDialogOpen] = useState(false);
  const [selectedRequest, setSelectedRequest] = useState<LeaveRequest | null>(null);
  const [approvalComment, setApprovalComment] = useState('');
  
  // Legacy reject dialog (keep for compatibility)
  const [rejectDialogOpen, setRejectDialogOpen] = useState(false);
  const [rejectReason, setRejectReason] = useState('');
  const [selectedRequestId, setSelectedRequestId] = useState<string>('');
  
  const { user } = useAuth();
  const { showSuccess, showError } = useNotification();

  const loadPendingRequests = async () => {
    try {
      if (user?.role === 'admin') {
        const response = await apiService.getPendingLeaveRequests();
        setPendingRequests(response.data || []);
      }
    } catch (error) {
      console.error('Error loading pending requests:', error);
      showError('ÏäπÏù∏ ÎåÄÍ∏∞ Ìú¥Í∞Ä Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  const loadPendingCancellations = async () => {
    try {
      if (user?.role === 'admin' || user?.role === 'manager') {
        const response = await apiService.getPendingCancellations();
        setPendingCancellations(response.data || []);
      }
    } catch (error) {
      console.error('Error loading pending cancellations:', error);
      showError('Ï∑®ÏÜå ÏäπÏù∏ ÎåÄÍ∏∞ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  const loadData = async () => {
    try {
      setLoading(true);
      await Promise.all([
        loadPendingRequests(),
        loadPendingCancellations()
      ]);
    } catch (error) {
      console.error('Error loading data:', error);
      showError('Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (user?.role === 'admin' || user?.role === 'manager') {
      loadData();
    }
  }, [user]);

  // New approval dialog handlers
  const handleOpenApprovalDialog = (request: LeaveRequest) => {
    setSelectedRequest(request);
    setApprovalComment('');
    setApprovalDialogOpen(true);
  };

  const handleCloseApprovalDialog = () => {
    setApprovalDialogOpen(false);
    setSelectedRequest(null);
    setApprovalComment('');
  };

  const handleApproval = async (action: 'approve' | 'reject') => {
    if (!selectedRequest) return;

    try {
      await apiService.approveLeaveRequest(selectedRequest._id, action, approvalComment);
      showSuccess(
        action === 'approve' ? 'Ìú¥Í∞ÄÍ∞Ä ÏäπÏù∏ÎêòÏóàÏäµÎãàÎã§.' : 'Ìú¥Í∞ÄÍ∞Ä Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§.'
      );
      handleCloseApprovalDialog();
      await loadData();
    } catch (error: any) {
      console.error('Error approving leave request:', error);
      const errorMessage = error.response?.data?.error || 'ÏäπÏù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
      showError(errorMessage);
    }
  };

  const handleCancellationApproval = async (requestId: string, action: 'approve' | 'reject') => {
    try {
      await apiService.approveLeaveCancellation(requestId, action, approvalComment);
      showSuccess(
        action === 'approve' ? 'Ìú¥Í∞Ä Ï∑®ÏÜåÍ∞Ä ÏäπÏù∏ÎêòÏóàÏäµÎãàÎã§.' : 'Ìú¥Í∞Ä Ï∑®ÏÜåÍ∞Ä Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§.'
      );
      handleCloseApprovalDialog();
      await loadData();
    } catch (error: any) {
      console.error('Error approving cancellation:', error);
      const errorMessage = error.response?.data?.error || 'Ï∑®ÏÜå ÏäπÏù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
      showError(errorMessage);
    }
  };

  // Legacy handlers (keep for compatibility)
  const handleApprove = async (requestId: string) => {
    try {
      await apiService.approveLeave(requestId, { status: 'approved' });
      showSuccess('Ìú¥Í∞Ä Ïã†Ï≤≠Ïù¥ ÏäπÏù∏ÎêòÏóàÏäµÎãàÎã§.');
      loadData();
    } catch (error) {
      showError('Ìú¥Í∞Ä ÏäπÏù∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const handleReject = async () => {
    try {
      await apiService.approveLeave(selectedRequestId, { 
        status: 'rejected', 
        rejectReason 
      });
      showSuccess('Ìú¥Í∞Ä Ïã†Ï≤≠Ïù¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§.');
      setRejectDialogOpen(false);
      setRejectReason('');
      setSelectedRequestId('');
      loadData();
    } catch (error) {
      showError('Ìú¥Í∞Ä Í±∞Î∂Ä Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const openRejectDialog = (requestId: string) => {
    setSelectedRequestId(requestId);
    setRejectDialogOpen(true);
  };

  const getLeaveTypeIcon = (type: string) => {
    switch (type) {
      case 'annual':
        return <BeachAccessIcon sx={{ color: '#2196f3' }} />;
      case 'sick':
        return <SickIcon sx={{ color: '#f44336' }} />;
      case 'personal':
        return <PersonIcon sx={{ color: '#ff9800' }} />;
      case 'special':
        return <EventIcon sx={{ color: '#9c27b0' }} />;
      case 'substitute':
        return <WorkIcon sx={{ color: '#607d8b' }} />;
      default:
        return <CalendarIcon sx={{ color: '#9e9e9e' }} />;
    }
  };

  const getLeaveTypeText = (type: string) => {
    const types: { [key: string]: string } = {
      annual: 'Ïó∞Ï∞®',
      sick: 'Î≥ëÍ∞Ä',
      personal: 'Í∞úÏù∏ÏÇ¨Ïú†',
      special: 'ÌäπÎ≥ÑÌú¥Í∞Ä',
      substitute: 'ÎåÄÏ≤¥Ìú¥Î¨¥'
    };
    return types[type] || type;
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending':
        return 'warning';
      case 'approved':
        return 'success';
      case 'rejected':
        return 'error';
      default:
        return 'default';
    }
  };

  const getLeaveTypeLabel = (type: string) => {
    const types: { [key: string]: string } = {
      annual: 'Ïó∞Ï∞®',
      sick: 'Î≥ëÍ∞Ä',
      personal: 'Í∞úÏù∏ÏÇ¨Ïú†',
      special: 'ÌäπÎ≥ÑÌú¥Í∞Ä',
      substitute: 'ÎåÄÏ≤¥Ìú¥Î¨¥',
      family: 'Í∞ÄÏ°±ÎèåÎ¥ÑÌú¥Í∞Ä'
    };
    return types[type] || type;
  };

  const safeFormatDate = (dateString: string) => {
    if (!dateString) return '-';
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) return '-';
      return date.toLocaleDateString('ko-KR');
    } catch (error) {
      return '-';
    }
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  if (user?.role !== 'admin' && user?.role !== 'manager') {
    return (
      <Box p={3}>
        <Alert severity="error">
          Ï†ëÍ∑º Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.
        </Alert>
      </Box>
    );
  }

  return (
    <Box p={3}>
      <Typography variant="h4" gutterBottom sx={{ fontWeight: 'bold', color: '#1976d2' }}>
        üë• ÏßÅÏõê Ìú¥Í∞Ä Í¥ÄÎ¶¨
      </Typography>

      <Card>
        <CardContent>
          {/* ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
          <Tabs value={tabValue} onChange={handleTabChange} aria-label="leave management tabs">
            <Tab
              label={
                <Badge badgeContent={pendingRequests.length} color="error">
                  ÏäπÏù∏ Í¥ÄÎ¶¨
                </Badge>
              }
            />
            <Tab
              label={
                <Badge badgeContent={pendingCancellations.length} color="warning">
                  Ï∑®ÏÜå ÏäπÏù∏
                </Badge>
              }
            />
          </Tabs>
        </CardContent>
        
        {loading && (
          <LinearProgress />
        )}

        {/* ÏäπÏù∏ Í¥ÄÎ¶¨ ÌÉ≠ */}
        <TabPanel value={tabValue} index={0}>
          {loading ? (
            <Box display="flex" justifyContent="center" p={4}>
              <CircularProgress />
            </Box>
          ) : pendingRequests.length === 0 ? (
            <Box display="flex" justifyContent="center" p={4}>
              <Typography color="text.secondary">
                ÏäπÏù∏ ÎåÄÍ∏∞ Ï§ëÏù∏ Ìú¥Í∞Ä Ïã†Ï≤≠Ïù¥ ÏóÜÏäµÎãàÎã§.
              </Typography>
            </Box>
          ) : (
            <TableContainer>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Ïã†Ï≤≠Ïûê</TableCell>
                    <TableCell>Î∂ÄÏÑú</TableCell>
                    <TableCell>Ìú¥Í∞Ä Ï¢ÖÎ•ò</TableCell>
                    <TableCell>Í∏∞Í∞Ñ</TableCell>
                    <TableCell>ÏùºÏàò</TableCell>
                    <TableCell>ÏÇ¨Ïú†</TableCell>
                    <TableCell>Ïã†Ï≤≠Ïùº</TableCell>
                    <TableCell>ÏûëÏóÖ</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {pendingRequests.map((request) => (
                    <TableRow key={request._id}>
                      <TableCell>
                        <Box display="flex" alignItems="center" gap={1}>
                          <Avatar sx={{ width: 24, height: 24 }}>
                            {request.userName?.[0] || '?'}
                          </Avatar>
                          {request.userName || 'ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏóÜÏùå'}
                        </Box>
                      </TableCell>
                      <TableCell>{request.userDepartment || 'Î∂ÄÏÑú Ï†ïÎ≥¥ ÏóÜÏùå'}</TableCell>
                      <TableCell>
                        <Box display="flex" alignItems="center" gap={1}>
                          {getLeaveTypeIcon(request.leaveType)}
                          {getLeaveTypeLabel(request.leaveType)}
                        </Box>
                      </TableCell>
                      <TableCell>
                        {safeFormatDate(request.startDate)} ~{' '}
                        {safeFormatDate(request.endDate)}
                      </TableCell>
                      <TableCell>{request.daysCount || 0}Ïùº</TableCell>
                      <TableCell>{request.reason || '-'}</TableCell>
                      <TableCell>
                        {safeFormatDate(request.createdAt)}
                      </TableCell>
                      <TableCell>
                        <Stack direction="row" spacing={1}>
                          <Tooltip title="ÏäπÏù∏">
                            <IconButton
                              size="small"
                              color="success"
                              onClick={() => {
                                if (request) {
                                  setSelectedRequest(request);
                                  handleApproval('approve');
                                }
                              }}
                            >
                              <CheckIcon />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Í±∞Î∂Ä">
                            <IconButton
                              size="small"
                              color="error"
                              onClick={() => request && handleOpenApprovalDialog(request)}
                            >
                              <CloseIcon />
                            </IconButton>
                          </Tooltip>
                        </Stack>
                      </TableCell>
                    </TableRow>
                  ))}
                  {(!pendingRequests || pendingRequests.length === 0) && (
                    <TableRow>
                      <TableCell colSpan={8} align="center">
                        <Typography color="text.secondary">
                          ÏäπÏù∏ ÎåÄÍ∏∞ Ï§ëÏù∏ Ìú¥Í∞Ä Ïã†Ï≤≠Ïù¥ ÏóÜÏäµÎãàÎã§.
                        </Typography>
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </TabPanel>

        {/* Ï∑®ÏÜå ÏäπÏù∏ ÌÉ≠ */}
        <TabPanel value={tabValue} index={1}>
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>ÏßÅÏõêÎ™Ö</TableCell>
                  <TableCell>Ìú¥Í∞Ä Ï¢ÖÎ•ò</TableCell>
                  <TableCell>Í∏∞Í∞Ñ</TableCell>
                  <TableCell>ÏùºÏàò</TableCell>
                  <TableCell>ÏõêÎûò ÏÇ¨Ïú†</TableCell>
                  <TableCell>Ï∑®ÏÜå ÏÇ¨Ïú†</TableCell>
                  <TableCell>Ï∑®ÏÜå Ïã†Ï≤≠Ïùº</TableCell>
                  <TableCell>ÏûëÏóÖ</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {pendingCancellations.map((request) => (
                  <TableRow key={request._id}>
                    <TableCell>
                      <Box display="flex" alignItems="center" gap={1}>
                        <Avatar sx={{ width: 32, height: 32 }}>
                          {request.userName?.[0] || '?'}
                        </Avatar>
                        <Box>
                          <Typography variant="subtitle2">
                            {request.userName}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            {request.userDepartment}
                          </Typography>
                        </Box>
                      </Box>
                    </TableCell>
                    <TableCell>
                      <Box display="flex" alignItems="center" gap={1}>
                        {getLeaveTypeIcon(request.leaveType)}
                        {getLeaveTypeLabel(request.leaveType)}
                      </Box>
                    </TableCell>
                    <TableCell>
                      {request.startDate === request.endDate
                        ? safeFormatDate(request.startDate)
                        : `${safeFormatDate(request.startDate)} ~ ${safeFormatDate(request.endDate)}`
                      }
                    </TableCell>
                    <TableCell>{request.daysCount}Ïùº</TableCell>
                    <TableCell>
                      <Typography variant="body2" noWrap>
                        {request.reason}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2" noWrap>
                        {request.cancellationReason}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      {safeFormatDate(request.cancellationRequestedAt)}
                    </TableCell>
                    <TableCell>
                      <Stack direction="row" spacing={1}>
                        <Tooltip title="Ï∑®ÏÜå ÏäπÏù∏">
                          <IconButton
                            size="small"
                            onClick={() => {
                              setSelectedRequest(request);
                              setApprovalComment('');
                              setApprovalDialogOpen(true);
                            }}
                            color="success"
                          >
                            <CheckIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Ï∑®ÏÜå Í±∞Î∂Ä">
                          <IconButton
                            size="small"
                            onClick={() => {
                              setSelectedRequest(request);
                              setApprovalComment('');
                              setApprovalDialogOpen(true);
                            }}
                            color="error"
                          >
                            <CloseIcon />
                          </IconButton>
                        </Tooltip>
                      </Stack>
                    </TableCell>
                  </TableRow>
                ))}
                {pendingCancellations.length === 0 && (
                  <TableRow>
                    <TableCell colSpan={8} align="center">
                      <Typography variant="body2" color="text.secondary" sx={{ py: 4 }}>
                        ÎåÄÍ∏∞ Ï§ëÏù∏ Ï∑®ÏÜå Ïã†Ï≤≠Ïù¥ ÏóÜÏäµÎãàÎã§.
                      </Typography>
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </TableContainer>
        </TabPanel>
      </Card>

      {/* Í±∞Î∂Ä ÏÇ¨Ïú† ÏûÖÎ†• Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
      <Dialog open={rejectDialogOpen} onClose={() => setRejectDialogOpen(false)}>
        <DialogTitle>Ìú¥Í∞Ä Ïã†Ï≤≠ Í±∞Î∂Ä</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Í±∞Î∂Ä ÏÇ¨Ïú†"
            fullWidth
            multiline
            rows={4}
            variant="outlined"
            value={rejectReason}
            onChange={(e) => setRejectReason(e.target.value)}
            placeholder="Í±∞Î∂Ä ÏÇ¨Ïú†Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî..."
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setRejectDialogOpen(false)}>Ï∑®ÏÜå</Button>
          <Button 
            onClick={handleReject} 
            color="error" 
            variant="contained"
            disabled={!rejectReason.trim()}
          >
            Í±∞Î∂Ä
          </Button>
        </DialogActions>
      </Dialog>

      {/* ÏÉàÎ°úÏö¥ ÏäπÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
      <Dialog open={approvalDialogOpen} onClose={handleCloseApprovalDialog} maxWidth="sm" fullWidth>
        <DialogTitle>
          {selectedRequest?.cancellationRequested ? 'Ìú¥Í∞Ä Ï∑®ÏÜå ÏäπÏù∏ Í¥ÄÎ¶¨' : 'Ìú¥Í∞Ä ÏäπÏù∏ Í¥ÄÎ¶¨'}
        </DialogTitle>
        <DialogContent>
          {selectedRequest && (
            <Box sx={{ mt: 2 }}>
              <Typography variant="subtitle1" gutterBottom>
                {selectedRequest.cancellationRequested 
                  ? `${selectedRequest.userName}ÎãòÏùò Ìú¥Í∞Ä Ï∑®ÏÜå Ïã†Ï≤≠`
                  : `${selectedRequest.userName}ÎãòÏùò Ìú¥Í∞Ä Ïã†Ï≤≠`
                }
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {getLeaveTypeLabel(selectedRequest.leaveType)} ‚Ä¢ {selectedRequest.daysCount}Ïùº ‚Ä¢ {' '}
                {safeFormatDate(selectedRequest.startDate)} ~ {' '}
                {safeFormatDate(selectedRequest.endDate)}
              </Typography>
              <Typography variant="body2" sx={{ mt: 1 }}>
                <strong>ÏÇ¨Ïú†:</strong> {selectedRequest.reason}
              </Typography>
              {selectedRequest.cancellationRequested && selectedRequest.cancellationReason && (
                <Typography variant="body2" sx={{ mt: 1 }}>
                  <strong>Ï∑®ÏÜå ÏÇ¨Ïú†:</strong> {selectedRequest.cancellationReason}
                </Typography>
              )}
              <TextField
                fullWidth
                label={selectedRequest.cancellationRequested ? "Ï∑®ÏÜå ÏäπÏù∏/Í±∞Î∂Ä ÏÇ¨Ïú†" : "ÏäπÏù∏/Í±∞Î∂Ä ÏÇ¨Ïú†"}
                multiline
                rows={3}
                value={approvalComment}
                onChange={(e) => setApprovalComment(e.target.value)}
                sx={{ mt: 2 }}
              />
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseApprovalDialog}>Ï∑®ÏÜå</Button>
          <Button
            onClick={() => {
              if (selectedRequest?.cancellationRequested) {
                handleCancellationApproval(selectedRequest._id, 'reject');
              } else {
                handleApproval('reject');
              }
            }}
            color="error"
            variant="outlined"
          >
            {selectedRequest?.cancellationRequested ? 'Ï∑®ÏÜå Í±∞Î∂Ä' : 'Í±∞Î∂Ä'}
          </Button>
          <Button
            onClick={() => {
              if (selectedRequest?.cancellationRequested) {
                handleCancellationApproval(selectedRequest._id, 'approve');
              } else {
                handleApproval('approve');
              }
            }}
            color="success"
            variant="contained"
          >
            {selectedRequest?.cancellationRequested ? 'Ï∑®ÏÜå ÏäπÏù∏' : 'ÏäπÏù∏'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default EmployeeLeaveManagement;