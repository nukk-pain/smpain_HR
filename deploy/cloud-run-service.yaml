# Cloud Run service configuration template
# This file can be used with `gcloud run services replace`

apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: hr-backend
  labels:
    app: hr-backend
    environment: production
  annotations:
    run.googleapis.com/ingress: all
    run.googleapis.com/execution-environment: gen2
spec:
  template:
    metadata:
      annotations:
        # Auto-scaling configuration
        autoscaling.knative.dev/minScale: "0"
        autoscaling.knative.dev/maxScale: "10"
        
        # Resource allocation
        run.googleapis.com/memory: "512Mi"
        run.googleapis.com/cpu: "1"
        run.googleapis.com/execution-environment: gen2
        
        # CPU allocation
        run.googleapis.com/cpu-throttling: "true"
        
        # Startup probe (for health checks)
        run.googleapis.com/startup-cpu-boost: "true"
        
    spec:
      # Container concurrency
      containerConcurrency: 80
      
      # Request timeout
      timeoutSeconds: 300
      
      containers:
      - name: hr-backend
        image: gcr.io/PROJECT_ID/hr-backend:latest
        
        ports:
        - name: http1
          containerPort: 8080
          
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8080"
          
        # Secrets from Secret Manager
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: latest
              name: mongodb-uri
        - name: SESSION_SECRET
          valueFrom:
            secretKeyRef:
              key: latest
              name: session-secret
              
        # Resource limits
        resources:
          limits:
            cpu: "1"
            memory: "512Mi"
            
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 10
          
  traffic:
  - percent: 100
    latestRevision: true